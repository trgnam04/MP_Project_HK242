/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.events;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema for topup events */
@org.apache.avro.specific.AvroGenerated
public class TopupEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -757529008837684215L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TopupEvent\",\"namespace\":\"com.events\",\"doc\":\"Schema for topup events\",\"fields\":[{\"name\":\"createdAt\",\"type\":\"string\"},{\"name\":\"updatedAt\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"phoneNumber\",\"type\":\"string\"},{\"name\":\"partnerTransId\",\"type\":\"string\"},{\"name\":\"supplierTransId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"jobId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"isPostpaid\",\"type\":\"int\"},{\"name\":\"totalAmount\",\"type\":\"int\"},{\"name\":\"discountRate\",\"type\":\"int\"},{\"name\":\"beforeCredit\",\"type\":\"int\"},{\"name\":\"afterCredit\",\"type\":\"int\"},{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"int\"},{\"name\":\"status\",\"type\":\"int\"},{\"name\":\"supplier\",\"type\":\"string\"},{\"name\":\"mobileData\",\"type\":\"string\"},{\"name\":\"merchantUser\",\"type\":\"string\"},{\"name\":\"merchantSubscription\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TopupEvent> ENCODER =
      new BinaryMessageEncoder<TopupEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TopupEvent> DECODER =
      new BinaryMessageDecoder<TopupEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TopupEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TopupEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TopupEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TopupEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TopupEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TopupEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TopupEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TopupEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence createdAt;
  private java.lang.CharSequence updatedAt;
  private java.lang.CharSequence id;
  private java.lang.CharSequence code;
  private java.lang.CharSequence description;
  private java.lang.CharSequence phoneNumber;
  private java.lang.CharSequence partnerTransId;
  private java.lang.CharSequence supplierTransId;
  private java.lang.CharSequence jobId;
  private int isPostpaid;
  private int totalAmount;
  private int discountRate;
  private int beforeCredit;
  private int afterCredit;
  private java.lang.CharSequence ip;
  private int type;
  private int status;
  private java.lang.CharSequence supplier;
  private java.lang.CharSequence mobileData;
  private java.lang.CharSequence merchantUser;
  private java.lang.CharSequence merchantSubscription;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TopupEvent() {}

  /**
   * All-args constructor.
   * @param createdAt The new value for createdAt
   * @param updatedAt The new value for updatedAt
   * @param id The new value for id
   * @param code The new value for code
   * @param description The new value for description
   * @param phoneNumber The new value for phoneNumber
   * @param partnerTransId The new value for partnerTransId
   * @param supplierTransId The new value for supplierTransId
   * @param jobId The new value for jobId
   * @param isPostpaid The new value for isPostpaid
   * @param totalAmount The new value for totalAmount
   * @param discountRate The new value for discountRate
   * @param beforeCredit The new value for beforeCredit
   * @param afterCredit The new value for afterCredit
   * @param ip The new value for ip
   * @param type The new value for type
   * @param status The new value for status
   * @param supplier The new value for supplier
   * @param mobileData The new value for mobileData
   * @param merchantUser The new value for merchantUser
   * @param merchantSubscription The new value for merchantSubscription
   */
  public TopupEvent(java.lang.CharSequence createdAt, java.lang.CharSequence updatedAt, java.lang.CharSequence id, java.lang.CharSequence code, java.lang.CharSequence description, java.lang.CharSequence phoneNumber, java.lang.CharSequence partnerTransId, java.lang.CharSequence supplierTransId, java.lang.CharSequence jobId, java.lang.Integer isPostpaid, java.lang.Integer totalAmount, java.lang.Integer discountRate, java.lang.Integer beforeCredit, java.lang.Integer afterCredit, java.lang.CharSequence ip, java.lang.Integer type, java.lang.Integer status, java.lang.CharSequence supplier, java.lang.CharSequence mobileData, java.lang.CharSequence merchantUser, java.lang.CharSequence merchantSubscription) {
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.id = id;
    this.code = code;
    this.description = description;
    this.phoneNumber = phoneNumber;
    this.partnerTransId = partnerTransId;
    this.supplierTransId = supplierTransId;
    this.jobId = jobId;
    this.isPostpaid = isPostpaid;
    this.totalAmount = totalAmount;
    this.discountRate = discountRate;
    this.beforeCredit = beforeCredit;
    this.afterCredit = afterCredit;
    this.ip = ip;
    this.type = type;
    this.status = status;
    this.supplier = supplier;
    this.mobileData = mobileData;
    this.merchantUser = merchantUser;
    this.merchantSubscription = merchantSubscription;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return createdAt;
    case 1: return updatedAt;
    case 2: return id;
    case 3: return code;
    case 4: return description;
    case 5: return phoneNumber;
    case 6: return partnerTransId;
    case 7: return supplierTransId;
    case 8: return jobId;
    case 9: return isPostpaid;
    case 10: return totalAmount;
    case 11: return discountRate;
    case 12: return beforeCredit;
    case 13: return afterCredit;
    case 14: return ip;
    case 15: return type;
    case 16: return status;
    case 17: return supplier;
    case 18: return mobileData;
    case 19: return merchantUser;
    case 20: return merchantSubscription;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: createdAt = (java.lang.CharSequence)value$; break;
    case 1: updatedAt = (java.lang.CharSequence)value$; break;
    case 2: id = (java.lang.CharSequence)value$; break;
    case 3: code = (java.lang.CharSequence)value$; break;
    case 4: description = (java.lang.CharSequence)value$; break;
    case 5: phoneNumber = (java.lang.CharSequence)value$; break;
    case 6: partnerTransId = (java.lang.CharSequence)value$; break;
    case 7: supplierTransId = (java.lang.CharSequence)value$; break;
    case 8: jobId = (java.lang.CharSequence)value$; break;
    case 9: isPostpaid = (java.lang.Integer)value$; break;
    case 10: totalAmount = (java.lang.Integer)value$; break;
    case 11: discountRate = (java.lang.Integer)value$; break;
    case 12: beforeCredit = (java.lang.Integer)value$; break;
    case 13: afterCredit = (java.lang.Integer)value$; break;
    case 14: ip = (java.lang.CharSequence)value$; break;
    case 15: type = (java.lang.Integer)value$; break;
    case 16: status = (java.lang.Integer)value$; break;
    case 17: supplier = (java.lang.CharSequence)value$; break;
    case 18: mobileData = (java.lang.CharSequence)value$; break;
    case 19: merchantUser = (java.lang.CharSequence)value$; break;
    case 20: merchantSubscription = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.lang.CharSequence getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.CharSequence value) {
    this.createdAt = value;
  }

  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public java.lang.CharSequence getUpdatedAt() {
    return updatedAt;
  }


  /**
   * Sets the value of the 'updatedAt' field.
   * @param value the value to set.
   */
  public void setUpdatedAt(java.lang.CharSequence value) {
    this.updatedAt = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'phoneNumber' field.
   * @return The value of the 'phoneNumber' field.
   */
  public java.lang.CharSequence getPhoneNumber() {
    return phoneNumber;
  }


  /**
   * Sets the value of the 'phoneNumber' field.
   * @param value the value to set.
   */
  public void setPhoneNumber(java.lang.CharSequence value) {
    this.phoneNumber = value;
  }

  /**
   * Gets the value of the 'partnerTransId' field.
   * @return The value of the 'partnerTransId' field.
   */
  public java.lang.CharSequence getPartnerTransId() {
    return partnerTransId;
  }


  /**
   * Sets the value of the 'partnerTransId' field.
   * @param value the value to set.
   */
  public void setPartnerTransId(java.lang.CharSequence value) {
    this.partnerTransId = value;
  }

  /**
   * Gets the value of the 'supplierTransId' field.
   * @return The value of the 'supplierTransId' field.
   */
  public java.lang.CharSequence getSupplierTransId() {
    return supplierTransId;
  }


  /**
   * Sets the value of the 'supplierTransId' field.
   * @param value the value to set.
   */
  public void setSupplierTransId(java.lang.CharSequence value) {
    this.supplierTransId = value;
  }

  /**
   * Gets the value of the 'jobId' field.
   * @return The value of the 'jobId' field.
   */
  public java.lang.CharSequence getJobId() {
    return jobId;
  }


  /**
   * Sets the value of the 'jobId' field.
   * @param value the value to set.
   */
  public void setJobId(java.lang.CharSequence value) {
    this.jobId = value;
  }

  /**
   * Gets the value of the 'isPostpaid' field.
   * @return The value of the 'isPostpaid' field.
   */
  public int getIsPostpaid() {
    return isPostpaid;
  }


  /**
   * Sets the value of the 'isPostpaid' field.
   * @param value the value to set.
   */
  public void setIsPostpaid(int value) {
    this.isPostpaid = value;
  }

  /**
   * Gets the value of the 'totalAmount' field.
   * @return The value of the 'totalAmount' field.
   */
  public int getTotalAmount() {
    return totalAmount;
  }


  /**
   * Sets the value of the 'totalAmount' field.
   * @param value the value to set.
   */
  public void setTotalAmount(int value) {
    this.totalAmount = value;
  }

  /**
   * Gets the value of the 'discountRate' field.
   * @return The value of the 'discountRate' field.
   */
  public int getDiscountRate() {
    return discountRate;
  }


  /**
   * Sets the value of the 'discountRate' field.
   * @param value the value to set.
   */
  public void setDiscountRate(int value) {
    this.discountRate = value;
  }

  /**
   * Gets the value of the 'beforeCredit' field.
   * @return The value of the 'beforeCredit' field.
   */
  public int getBeforeCredit() {
    return beforeCredit;
  }


  /**
   * Sets the value of the 'beforeCredit' field.
   * @param value the value to set.
   */
  public void setBeforeCredit(int value) {
    this.beforeCredit = value;
  }

  /**
   * Gets the value of the 'afterCredit' field.
   * @return The value of the 'afterCredit' field.
   */
  public int getAfterCredit() {
    return afterCredit;
  }


  /**
   * Sets the value of the 'afterCredit' field.
   * @param value the value to set.
   */
  public void setAfterCredit(int value) {
    this.afterCredit = value;
  }

  /**
   * Gets the value of the 'ip' field.
   * @return The value of the 'ip' field.
   */
  public java.lang.CharSequence getIp() {
    return ip;
  }


  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(java.lang.CharSequence value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public int getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(int value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public int getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(int value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'supplier' field.
   * @return The value of the 'supplier' field.
   */
  public java.lang.CharSequence getSupplier() {
    return supplier;
  }


  /**
   * Sets the value of the 'supplier' field.
   * @param value the value to set.
   */
  public void setSupplier(java.lang.CharSequence value) {
    this.supplier = value;
  }

  /**
   * Gets the value of the 'mobileData' field.
   * @return The value of the 'mobileData' field.
   */
  public java.lang.CharSequence getMobileData() {
    return mobileData;
  }


  /**
   * Sets the value of the 'mobileData' field.
   * @param value the value to set.
   */
  public void setMobileData(java.lang.CharSequence value) {
    this.mobileData = value;
  }

  /**
   * Gets the value of the 'merchantUser' field.
   * @return The value of the 'merchantUser' field.
   */
  public java.lang.CharSequence getMerchantUser() {
    return merchantUser;
  }


  /**
   * Sets the value of the 'merchantUser' field.
   * @param value the value to set.
   */
  public void setMerchantUser(java.lang.CharSequence value) {
    this.merchantUser = value;
  }

  /**
   * Gets the value of the 'merchantSubscription' field.
   * @return The value of the 'merchantSubscription' field.
   */
  public java.lang.CharSequence getMerchantSubscription() {
    return merchantSubscription;
  }


  /**
   * Sets the value of the 'merchantSubscription' field.
   * @param value the value to set.
   */
  public void setMerchantSubscription(java.lang.CharSequence value) {
    this.merchantSubscription = value;
  }

  /**
   * Creates a new TopupEvent RecordBuilder.
   * @return A new TopupEvent RecordBuilder
   */
  public static com.events.TopupEvent.Builder newBuilder() {
    return new com.events.TopupEvent.Builder();
  }

  /**
   * Creates a new TopupEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TopupEvent RecordBuilder
   */
  public static com.events.TopupEvent.Builder newBuilder(com.events.TopupEvent.Builder other) {
    if (other == null) {
      return new com.events.TopupEvent.Builder();
    } else {
      return new com.events.TopupEvent.Builder(other);
    }
  }

  /**
   * Creates a new TopupEvent RecordBuilder by copying an existing TopupEvent instance.
   * @param other The existing instance to copy.
   * @return A new TopupEvent RecordBuilder
   */
  public static com.events.TopupEvent.Builder newBuilder(com.events.TopupEvent other) {
    if (other == null) {
      return new com.events.TopupEvent.Builder();
    } else {
      return new com.events.TopupEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for TopupEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TopupEvent>
    implements org.apache.avro.data.RecordBuilder<TopupEvent> {

    private java.lang.CharSequence createdAt;
    private java.lang.CharSequence updatedAt;
    private java.lang.CharSequence id;
    private java.lang.CharSequence code;
    private java.lang.CharSequence description;
    private java.lang.CharSequence phoneNumber;
    private java.lang.CharSequence partnerTransId;
    private java.lang.CharSequence supplierTransId;
    private java.lang.CharSequence jobId;
    private int isPostpaid;
    private int totalAmount;
    private int discountRate;
    private int beforeCredit;
    private int afterCredit;
    private java.lang.CharSequence ip;
    private int type;
    private int status;
    private java.lang.CharSequence supplier;
    private java.lang.CharSequence mobileData;
    private java.lang.CharSequence merchantUser;
    private java.lang.CharSequence merchantSubscription;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.events.TopupEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[0].schema(), other.createdAt);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[1].schema(), other.updatedAt);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.code)) {
        this.code = data().deepCopy(fields()[3].schema(), other.code);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[5].schema(), other.phoneNumber);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.partnerTransId)) {
        this.partnerTransId = data().deepCopy(fields()[6].schema(), other.partnerTransId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.supplierTransId)) {
        this.supplierTransId = data().deepCopy(fields()[7].schema(), other.supplierTransId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.jobId)) {
        this.jobId = data().deepCopy(fields()[8].schema(), other.jobId);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.isPostpaid)) {
        this.isPostpaid = data().deepCopy(fields()[9].schema(), other.isPostpaid);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.totalAmount)) {
        this.totalAmount = data().deepCopy(fields()[10].schema(), other.totalAmount);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.discountRate)) {
        this.discountRate = data().deepCopy(fields()[11].schema(), other.discountRate);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.beforeCredit)) {
        this.beforeCredit = data().deepCopy(fields()[12].schema(), other.beforeCredit);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.afterCredit)) {
        this.afterCredit = data().deepCopy(fields()[13].schema(), other.afterCredit);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.ip)) {
        this.ip = data().deepCopy(fields()[14].schema(), other.ip);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.type)) {
        this.type = data().deepCopy(fields()[15].schema(), other.type);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.status)) {
        this.status = data().deepCopy(fields()[16].schema(), other.status);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.supplier)) {
        this.supplier = data().deepCopy(fields()[17].schema(), other.supplier);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.mobileData)) {
        this.mobileData = data().deepCopy(fields()[18].schema(), other.mobileData);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.merchantUser)) {
        this.merchantUser = data().deepCopy(fields()[19].schema(), other.merchantUser);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.merchantSubscription)) {
        this.merchantSubscription = data().deepCopy(fields()[20].schema(), other.merchantSubscription);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
    }

    /**
     * Creates a Builder by copying an existing TopupEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.events.TopupEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[0].schema(), other.createdAt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[1].schema(), other.updatedAt);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.code)) {
        this.code = data().deepCopy(fields()[3].schema(), other.code);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[5].schema(), other.phoneNumber);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.partnerTransId)) {
        this.partnerTransId = data().deepCopy(fields()[6].schema(), other.partnerTransId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.supplierTransId)) {
        this.supplierTransId = data().deepCopy(fields()[7].schema(), other.supplierTransId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.jobId)) {
        this.jobId = data().deepCopy(fields()[8].schema(), other.jobId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.isPostpaid)) {
        this.isPostpaid = data().deepCopy(fields()[9].schema(), other.isPostpaid);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.totalAmount)) {
        this.totalAmount = data().deepCopy(fields()[10].schema(), other.totalAmount);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.discountRate)) {
        this.discountRate = data().deepCopy(fields()[11].schema(), other.discountRate);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.beforeCredit)) {
        this.beforeCredit = data().deepCopy(fields()[12].schema(), other.beforeCredit);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.afterCredit)) {
        this.afterCredit = data().deepCopy(fields()[13].schema(), other.afterCredit);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.ip)) {
        this.ip = data().deepCopy(fields()[14].schema(), other.ip);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.type)) {
        this.type = data().deepCopy(fields()[15].schema(), other.type);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.status)) {
        this.status = data().deepCopy(fields()[16].schema(), other.status);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.supplier)) {
        this.supplier = data().deepCopy(fields()[17].schema(), other.supplier);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.mobileData)) {
        this.mobileData = data().deepCopy(fields()[18].schema(), other.mobileData);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.merchantUser)) {
        this.merchantUser = data().deepCopy(fields()[19].schema(), other.merchantUser);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.merchantSubscription)) {
        this.merchantSubscription = data().deepCopy(fields()[20].schema(), other.merchantSubscription);
        fieldSetFlags()[20] = true;
      }
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setCreatedAt(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.createdAt = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearCreatedAt() {
      createdAt = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public java.lang.CharSequence getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setUpdatedAt(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.updatedAt = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearUpdatedAt() {
      updatedAt = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.code = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearCode() {
      code = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'phoneNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getPhoneNumber() {
      return phoneNumber;
    }


    /**
      * Sets the value of the 'phoneNumber' field.
      * @param value The value of 'phoneNumber'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setPhoneNumber(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.phoneNumber = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'phoneNumber' field has been set.
      * @return True if the 'phoneNumber' field has been set, false otherwise.
      */
    public boolean hasPhoneNumber() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'phoneNumber' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearPhoneNumber() {
      phoneNumber = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'partnerTransId' field.
      * @return The value.
      */
    public java.lang.CharSequence getPartnerTransId() {
      return partnerTransId;
    }


    /**
      * Sets the value of the 'partnerTransId' field.
      * @param value The value of 'partnerTransId'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setPartnerTransId(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.partnerTransId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'partnerTransId' field has been set.
      * @return True if the 'partnerTransId' field has been set, false otherwise.
      */
    public boolean hasPartnerTransId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'partnerTransId' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearPartnerTransId() {
      partnerTransId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'supplierTransId' field.
      * @return The value.
      */
    public java.lang.CharSequence getSupplierTransId() {
      return supplierTransId;
    }


    /**
      * Sets the value of the 'supplierTransId' field.
      * @param value The value of 'supplierTransId'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setSupplierTransId(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.supplierTransId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'supplierTransId' field has been set.
      * @return True if the 'supplierTransId' field has been set, false otherwise.
      */
    public boolean hasSupplierTransId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'supplierTransId' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearSupplierTransId() {
      supplierTransId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'jobId' field.
      * @return The value.
      */
    public java.lang.CharSequence getJobId() {
      return jobId;
    }


    /**
      * Sets the value of the 'jobId' field.
      * @param value The value of 'jobId'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setJobId(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.jobId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'jobId' field has been set.
      * @return True if the 'jobId' field has been set, false otherwise.
      */
    public boolean hasJobId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'jobId' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearJobId() {
      jobId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'isPostpaid' field.
      * @return The value.
      */
    public int getIsPostpaid() {
      return isPostpaid;
    }


    /**
      * Sets the value of the 'isPostpaid' field.
      * @param value The value of 'isPostpaid'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setIsPostpaid(int value) {
      validate(fields()[9], value);
      this.isPostpaid = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'isPostpaid' field has been set.
      * @return True if the 'isPostpaid' field has been set, false otherwise.
      */
    public boolean hasIsPostpaid() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'isPostpaid' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearIsPostpaid() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalAmount' field.
      * @return The value.
      */
    public int getTotalAmount() {
      return totalAmount;
    }


    /**
      * Sets the value of the 'totalAmount' field.
      * @param value The value of 'totalAmount'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setTotalAmount(int value) {
      validate(fields()[10], value);
      this.totalAmount = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'totalAmount' field has been set.
      * @return True if the 'totalAmount' field has been set, false otherwise.
      */
    public boolean hasTotalAmount() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'totalAmount' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearTotalAmount() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'discountRate' field.
      * @return The value.
      */
    public int getDiscountRate() {
      return discountRate;
    }


    /**
      * Sets the value of the 'discountRate' field.
      * @param value The value of 'discountRate'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setDiscountRate(int value) {
      validate(fields()[11], value);
      this.discountRate = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'discountRate' field has been set.
      * @return True if the 'discountRate' field has been set, false otherwise.
      */
    public boolean hasDiscountRate() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'discountRate' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearDiscountRate() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'beforeCredit' field.
      * @return The value.
      */
    public int getBeforeCredit() {
      return beforeCredit;
    }


    /**
      * Sets the value of the 'beforeCredit' field.
      * @param value The value of 'beforeCredit'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setBeforeCredit(int value) {
      validate(fields()[12], value);
      this.beforeCredit = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'beforeCredit' field has been set.
      * @return True if the 'beforeCredit' field has been set, false otherwise.
      */
    public boolean hasBeforeCredit() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'beforeCredit' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearBeforeCredit() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'afterCredit' field.
      * @return The value.
      */
    public int getAfterCredit() {
      return afterCredit;
    }


    /**
      * Sets the value of the 'afterCredit' field.
      * @param value The value of 'afterCredit'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setAfterCredit(int value) {
      validate(fields()[13], value);
      this.afterCredit = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'afterCredit' field has been set.
      * @return True if the 'afterCredit' field has been set, false otherwise.
      */
    public boolean hasAfterCredit() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'afterCredit' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearAfterCredit() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'ip' field.
      * @return The value.
      */
    public java.lang.CharSequence getIp() {
      return ip;
    }


    /**
      * Sets the value of the 'ip' field.
      * @param value The value of 'ip'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setIp(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.ip = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'ip' field has been set.
      * @return True if the 'ip' field has been set, false otherwise.
      */
    public boolean hasIp() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'ip' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearIp() {
      ip = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public int getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setType(int value) {
      validate(fields()[15], value);
      this.type = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearType() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public int getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setStatus(int value) {
      validate(fields()[16], value);
      this.status = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearStatus() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'supplier' field.
      * @return The value.
      */
    public java.lang.CharSequence getSupplier() {
      return supplier;
    }


    /**
      * Sets the value of the 'supplier' field.
      * @param value The value of 'supplier'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setSupplier(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.supplier = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'supplier' field has been set.
      * @return True if the 'supplier' field has been set, false otherwise.
      */
    public boolean hasSupplier() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'supplier' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearSupplier() {
      supplier = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'mobileData' field.
      * @return The value.
      */
    public java.lang.CharSequence getMobileData() {
      return mobileData;
    }


    /**
      * Sets the value of the 'mobileData' field.
      * @param value The value of 'mobileData'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setMobileData(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.mobileData = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'mobileData' field has been set.
      * @return True if the 'mobileData' field has been set, false otherwise.
      */
    public boolean hasMobileData() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'mobileData' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearMobileData() {
      mobileData = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'merchantUser' field.
      * @return The value.
      */
    public java.lang.CharSequence getMerchantUser() {
      return merchantUser;
    }


    /**
      * Sets the value of the 'merchantUser' field.
      * @param value The value of 'merchantUser'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setMerchantUser(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.merchantUser = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'merchantUser' field has been set.
      * @return True if the 'merchantUser' field has been set, false otherwise.
      */
    public boolean hasMerchantUser() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'merchantUser' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearMerchantUser() {
      merchantUser = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'merchantSubscription' field.
      * @return The value.
      */
    public java.lang.CharSequence getMerchantSubscription() {
      return merchantSubscription;
    }


    /**
      * Sets the value of the 'merchantSubscription' field.
      * @param value The value of 'merchantSubscription'.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder setMerchantSubscription(java.lang.CharSequence value) {
      validate(fields()[20], value);
      this.merchantSubscription = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'merchantSubscription' field has been set.
      * @return True if the 'merchantSubscription' field has been set, false otherwise.
      */
    public boolean hasMerchantSubscription() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'merchantSubscription' field.
      * @return This builder.
      */
    public com.events.TopupEvent.Builder clearMerchantSubscription() {
      merchantSubscription = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TopupEvent build() {
      try {
        TopupEvent record = new TopupEvent();
        record.createdAt = fieldSetFlags()[0] ? this.createdAt : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.updatedAt = fieldSetFlags()[1] ? this.updatedAt : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.id = fieldSetFlags()[2] ? this.id : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.code = fieldSetFlags()[3] ? this.code : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.description = fieldSetFlags()[4] ? this.description : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.phoneNumber = fieldSetFlags()[5] ? this.phoneNumber : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.partnerTransId = fieldSetFlags()[6] ? this.partnerTransId : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.supplierTransId = fieldSetFlags()[7] ? this.supplierTransId : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.jobId = fieldSetFlags()[8] ? this.jobId : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.isPostpaid = fieldSetFlags()[9] ? this.isPostpaid : (java.lang.Integer) defaultValue(fields()[9]);
        record.totalAmount = fieldSetFlags()[10] ? this.totalAmount : (java.lang.Integer) defaultValue(fields()[10]);
        record.discountRate = fieldSetFlags()[11] ? this.discountRate : (java.lang.Integer) defaultValue(fields()[11]);
        record.beforeCredit = fieldSetFlags()[12] ? this.beforeCredit : (java.lang.Integer) defaultValue(fields()[12]);
        record.afterCredit = fieldSetFlags()[13] ? this.afterCredit : (java.lang.Integer) defaultValue(fields()[13]);
        record.ip = fieldSetFlags()[14] ? this.ip : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.type = fieldSetFlags()[15] ? this.type : (java.lang.Integer) defaultValue(fields()[15]);
        record.status = fieldSetFlags()[16] ? this.status : (java.lang.Integer) defaultValue(fields()[16]);
        record.supplier = fieldSetFlags()[17] ? this.supplier : (java.lang.CharSequence) defaultValue(fields()[17]);
        record.mobileData = fieldSetFlags()[18] ? this.mobileData : (java.lang.CharSequence) defaultValue(fields()[18]);
        record.merchantUser = fieldSetFlags()[19] ? this.merchantUser : (java.lang.CharSequence) defaultValue(fields()[19]);
        record.merchantSubscription = fieldSetFlags()[20] ? this.merchantSubscription : (java.lang.CharSequence) defaultValue(fields()[20]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TopupEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<TopupEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TopupEvent>
    READER$ = (org.apache.avro.io.DatumReader<TopupEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.createdAt);

    out.writeString(this.updatedAt);

    out.writeString(this.id);

    out.writeString(this.code);

    out.writeString(this.description);

    out.writeString(this.phoneNumber);

    out.writeString(this.partnerTransId);

    if (this.supplierTransId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.supplierTransId);
    }

    if (this.jobId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.jobId);
    }

    out.writeInt(this.isPostpaid);

    out.writeInt(this.totalAmount);

    out.writeInt(this.discountRate);

    out.writeInt(this.beforeCredit);

    out.writeInt(this.afterCredit);

    out.writeString(this.ip);

    out.writeInt(this.type);

    out.writeInt(this.status);

    out.writeString(this.supplier);

    out.writeString(this.mobileData);

    out.writeString(this.merchantUser);

    out.writeString(this.merchantSubscription);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.createdAt = in.readString(this.createdAt instanceof Utf8 ? (Utf8)this.createdAt : null);

      this.updatedAt = in.readString(this.updatedAt instanceof Utf8 ? (Utf8)this.updatedAt : null);

      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);

      this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);

      this.phoneNumber = in.readString(this.phoneNumber instanceof Utf8 ? (Utf8)this.phoneNumber : null);

      this.partnerTransId = in.readString(this.partnerTransId instanceof Utf8 ? (Utf8)this.partnerTransId : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.supplierTransId = null;
      } else {
        this.supplierTransId = in.readString(this.supplierTransId instanceof Utf8 ? (Utf8)this.supplierTransId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.jobId = null;
      } else {
        this.jobId = in.readString(this.jobId instanceof Utf8 ? (Utf8)this.jobId : null);
      }

      this.isPostpaid = in.readInt();

      this.totalAmount = in.readInt();

      this.discountRate = in.readInt();

      this.beforeCredit = in.readInt();

      this.afterCredit = in.readInt();

      this.ip = in.readString(this.ip instanceof Utf8 ? (Utf8)this.ip : null);

      this.type = in.readInt();

      this.status = in.readInt();

      this.supplier = in.readString(this.supplier instanceof Utf8 ? (Utf8)this.supplier : null);

      this.mobileData = in.readString(this.mobileData instanceof Utf8 ? (Utf8)this.mobileData : null);

      this.merchantUser = in.readString(this.merchantUser instanceof Utf8 ? (Utf8)this.merchantUser : null);

      this.merchantSubscription = in.readString(this.merchantSubscription instanceof Utf8 ? (Utf8)this.merchantSubscription : null);

    } else {
      for (int i = 0; i < 21; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.createdAt = in.readString(this.createdAt instanceof Utf8 ? (Utf8)this.createdAt : null);
          break;

        case 1:
          this.updatedAt = in.readString(this.updatedAt instanceof Utf8 ? (Utf8)this.updatedAt : null);
          break;

        case 2:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 3:
          this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);
          break;

        case 4:
          this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);
          break;

        case 5:
          this.phoneNumber = in.readString(this.phoneNumber instanceof Utf8 ? (Utf8)this.phoneNumber : null);
          break;

        case 6:
          this.partnerTransId = in.readString(this.partnerTransId instanceof Utf8 ? (Utf8)this.partnerTransId : null);
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.supplierTransId = null;
          } else {
            this.supplierTransId = in.readString(this.supplierTransId instanceof Utf8 ? (Utf8)this.supplierTransId : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.jobId = null;
          } else {
            this.jobId = in.readString(this.jobId instanceof Utf8 ? (Utf8)this.jobId : null);
          }
          break;

        case 9:
          this.isPostpaid = in.readInt();
          break;

        case 10:
          this.totalAmount = in.readInt();
          break;

        case 11:
          this.discountRate = in.readInt();
          break;

        case 12:
          this.beforeCredit = in.readInt();
          break;

        case 13:
          this.afterCredit = in.readInt();
          break;

        case 14:
          this.ip = in.readString(this.ip instanceof Utf8 ? (Utf8)this.ip : null);
          break;

        case 15:
          this.type = in.readInt();
          break;

        case 16:
          this.status = in.readInt();
          break;

        case 17:
          this.supplier = in.readString(this.supplier instanceof Utf8 ? (Utf8)this.supplier : null);
          break;

        case 18:
          this.mobileData = in.readString(this.mobileData instanceof Utf8 ? (Utf8)this.mobileData : null);
          break;

        case 19:
          this.merchantUser = in.readString(this.merchantUser instanceof Utf8 ? (Utf8)this.merchantUser : null);
          break;

        case 20:
          this.merchantSubscription = in.readString(this.merchantSubscription instanceof Utf8 ? (Utf8)this.merchantSubscription : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










